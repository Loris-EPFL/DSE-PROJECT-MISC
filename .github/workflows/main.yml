name: Go Tests with Coverage

on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  push:
    branches:
      - 'main'

jobs:
  unit_tests:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.1

      # Run all unit tests and generate coverage profile
      #- name: Run HW0 unit tests
      #  run: GLOG=no go test -v -race -coverprofile=hw0_coverage.txt ./peer/tests/HW0/unit

      # name: Run HW0 integration tests
      # run: GLOG=no go test -v -race -coverprofile=coverage.out ./peer/tests/HW0/integration

      #- name: Run HW1 unit tests
      #  run: GLOG=no go test -v -race -coverprofile=hw1_coverage.txt ./peer/tests/HW1/unit

      # name: Run HW1 integration tests
      # run: GLOG=no go test -v -race -coverprofile=coverage.out ./peer/tests/HW1/integration

      # Here we run our tests for Namecoin
      - name: Run Namecoin tests
        run: GLOG=no go test -v -race -coverprofile=namecoin_coverage.out ./peer/impl/

      # Merge all coverage profiles into a single file
      - name: Merge Coverage Files
        run: |
          echo "mode: set" > coverage.out
          tail -n +2 namecoin_coverage.out >> coverage.out

      # Upload the merged coverage profile as an artifact
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.out

  generate_badge:
    name: "Generate Coverage Badge"
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Download the coverage.out artifact
      - name: Download Coverage Artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: .  # Downloads to the current directory

      # Step 3: Generate Coverage Badge
      - name: Go Coverage Badge
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out
          # Optional Inputs:
          color: 'brightgreen'  # Can be 'green', 'yellow', 'red', or any color code
          link: 'https://github.com/cs438-epfl/2024-proj-namecoin-group-33'  # URL to link the badge to
          target: 'docs/README.md'  # File to update with the badge
          text: 'Coverage'  # Text on the left side of the badge
          # You can set other inputs as needed

      # Step 4: Verify if README.md has changed
      - name: Verify Changed files
        uses: tj-actions/verify-changed-files@v20
        id: verify-changed-files
        with:
          files: README.md

      # Step 5: Commit changes if README.md was updated
      - name: Commit changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/README.md
          git commit -m "chore: Updated coverage badge."

      # Step 6: Push changes back to the repository
      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
